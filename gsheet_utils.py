import pandas as pd
import gspread
import ast
from urllib.parse import unquote
from google.colab import auth
from google.auth import default

from utils import extract_sheet_params, normalize_url

#
# 4. –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó GOOGLE SHEETS
#
def check_sheet_structure(google_sheet):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É Google —Ç–∞–±–ª–∏—Ü—ñ."""
    print("–ê–≤—Ç–æ—Ä–∏–∑—É—î–º–æ—Å—è –≤ Google...")
    auth.authenticate_user()

    try:
        # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ
        print(f"–í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é: {google_sheet}")
        sheet_params = extract_sheet_params(google_sheet)
        if not sheet_params:
            return {"success": False, "error": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL Google —Ç–∞–±–ª–∏—Ü—ñ"}

        sheet_id, gid = sheet_params
        gc = gspread.authorize(default()[0])
        sheet = gc.open_by_key(sheet_id)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏ –∑–∞ gid
        all_worksheets = sheet.worksheets()
        worksheet = next((ws for ws in all_worksheets if ws.id == gid), None) or sheet.get_worksheet(0)
        print(f"{'–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∫–ª–∞–¥–∫—É: '+worksheet.title if worksheet.id == gid else f'–£–≤–∞–≥–∞: –í–∫–ª–∞–¥–∫–∞ –∑ gid={gid} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à—É –≤–∫–ª–∞–¥–∫—É'}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö —Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        data = worksheet.get_all_values()
        if not data:
            return {"success": False, "error": "–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è"}

        # –û—Å–Ω–æ–≤–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        mandatory_headers = ["–ê–Ω–∫–æ—Ä-1", "–£—Ä–ª-1", "Url"]
        # –£—Å—ñ –æ—á—ñ–∫—É–≤–∞–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –≤–∫–ª—é—á–∞—é—á–∏ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ
        all_expected_headers_prefix = ["–ê–Ω–∫–æ—Ä-1", "–£—Ä–ª-1", "–ê–Ω–∫–æ—Ä-2", "–£—Ä–ª-2", "–ê–Ω–∫–æ—Ä-3", "–£—Ä–ª-3", "Url"]
        actual_headers = data[0]

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ –ø–æ—Ä—è–¥–æ–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        missing_mandatory = [h for h in mandatory_headers if h not in actual_headers]
        if missing_mandatory:
             return {
                "success": False,
                "error": f"–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(missing_mandatory)}. –û—á—ñ–∫—É—î—Ç—å—Å—è —â–æ–Ω–∞–π–º–µ–Ω—à–µ: {mandatory_headers}",
                "actual_headers": actual_headers
             }

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å 'Url' –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—Ä—è–¥–∫—É
        try:
             url_index_actual = actual_headers.index("Url")
        except ValueError:
             # –¶—è –ø–æ–º–∏–ª–∫–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –≤–∏—â–µ, –∞–ª–µ –¥–ª—è –ø–æ–≤–Ω–æ—Ç–∏
             return {"success": False, "error": "–í—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ 'Url'", "actual_headers": actual_headers}

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–µ—Ä—à—ñ —Å—Ç–æ–≤–ø—Ü—ñ (–¥–æ 'Url') –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω–æ–º—É –ø—Ä–µ—Ñ—ñ–∫—Å—É,
        # –≤—Ä–∞—Ö–æ–≤—É—é—á–∏, —â–æ –ê–Ω–∫–æ—Ä/–£—Ä–ª 2 —ñ 3 –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º–∏
        expected_prefix_found = True
        current_expected_index = 0
        for i in range(url_index_actual): # –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ —Å—Ç–æ–≤–ø—Ü—ñ –¥–æ 'Url'
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î –≤ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö
            while current_expected_index < len(all_expected_headers_prefix) -1 and \
                  all_expected_headers_prefix[current_expected_index] not in actual_headers:
                 current_expected_index += 2 # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä—É –ê–Ω–∫–æ—Ä/–£—Ä–ª

            if current_expected_index >= len(all_expected_headers_prefix) -1 or \
               actual_headers[i] != all_expected_headers_prefix[current_expected_index]:
                 expected_prefix_found = False
                 break
            current_expected_index += 1

        if not expected_prefix_found:
             # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö
             present_expected = [h for h in all_expected_headers_prefix if h in actual_headers]
             return {
                 "success": False,
                 "error": f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –∞–±–æ –Ω–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤ –ø–µ—Ä–µ–¥ 'Url'. –û—á—ñ–∫—É–≤–∞–ª–∏—Å—å (–≤ —Ç–∞–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É, —è–∫—â–æ –ø—Ä–∏—Å—É—Ç–Ω—ñ): {present_expected[:-1]}, –ó–Ω–∞–π–¥–µ–Ω–æ: {actual_headers[:url_index_actual]}",
                 "actual_headers": actual_headers
             }

        # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ –ü–Ü–°–õ–Ø 'Url'
        mandatory_set = set(all_expected_headers_prefix)
        extra_cols = [h for i, h in enumerate(actual_headers) if i > url_index_actual and h not in mandatory_set]
        if extra_cols:
            print(f"–ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ –ø—ñ—Å–ª—è 'Url': {', '.join(extra_cols)}. –í–æ–Ω–∏ –±—É–¥—É—Ç—å –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω—ñ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ.")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –ê–Ω–∫–æ—Ä-1, –£—Ä–ª-1, Url)
        df = pd.DataFrame(data[1:], columns=actual_headers) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        missing_data = {col: idxs for col in mandatory_headers
                      if col in df.columns and (idxs := [i+2 for i in df[df[col].isin(["", None])].index.tolist()])}

        return {
            "success": not missing_data,
            "error" if missing_data else "message": f"–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –≤ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—è—Ö: {missing_data}" if missing_data else "–¢–∞–±–ª–∏—Ü—è –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É.",
            "data": data,
            "worksheet": worksheet
        }

    except Exception as e:
        return {"success": False, "error": f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"}

def update_sheet_with_results(worksheet, results):
    """–û–Ω–æ–≤–ª—é—î Google —Ç–∞–±–ª–∏—Ü—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ URL —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω—å."""
    print("\n\nüìù –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í –£ GOOGLE –¢–ê–ë–õ–ò–¶–Æ...\n")

    sheet_data = worksheet.get_all_values()
    headers = sheet_data[0] if sheet_data else []
    if not headers:
        print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ.")
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å —Å—Ç–æ–≤–ø—Ü—è "Url"
    try:
        url_index = headers.index("Url")
    except ValueError:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –°—Ç–æ–≤–ø–µ—Ü—å 'Url' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö: {headers}")
        return

    # –ë–∞–∑–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (–∑–∞–≤–∂–¥–∏ –¥–æ–¥–∞—é—Ç—å—Å—è/–ø–µ—Ä–µ–≤—ñ—Ä—è—é—Ç—å—Å—è)
    base_result_headers = [
        "Status Code", "Final Redirect URL", "Final Status Code",
        "Robots.txt", "Meta Robots/X-Robots-Tag", "Canonical",
        "–£—Ä–ª-1 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å", "–ê–Ω–∫–æ—Ä-1 —Å–ø—ñ–≤–ø–∞–¥–∞—î", "–£—Ä–ª-1 rel",
    ]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—Ö—ñ–¥–Ω–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è –ø–∞—Ä 2 —ñ 3
    has_input_pair2 = "–ê–Ω–∫–æ—Ä-2" in headers and "–£—Ä–ª-2" in headers
    has_input_pair3 = "–ê–Ω–∫–æ—Ä-3" in headers and "–£—Ä–ª-3" in headers
    
    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    required_headers = list(base_result_headers) # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –±–∞–∑–æ–≤–∏—Ö
    if has_input_pair2:
        required_headers.extend([
            "–£—Ä–ª-2 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å", "–ê–Ω–∫–æ—Ä-2 —Å–ø—ñ–≤–ø–∞–¥–∞—î", "–£—Ä–ª-2 rel"
        ])
    if has_input_pair3:
         required_headers.extend([
             "–£—Ä–ª-3 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å", "–ê–Ω–∫–æ—Ä-3 —Å–ø—ñ–≤–ø–∞–¥–∞—î", "–£—Ä–ª-3 rel"
         ])

    new_headers = []
    header_indices = {} # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –í–°–Ü–• –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤

    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ —ñ—Å–Ω—É—é—á–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤ (–≤–∫–ª—é—á–∞—é—á–∏ "Url")
    for i, h in enumerate(headers):
        if h in required_headers or h == "Url":
            header_indices[h] = i

    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Ç—ñ–ª—å–∫–∏ —Ç—ñ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ) —ñ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏
    current_col_index = len(headers)
    for header in required_headers:
        if header not in headers:
            new_headers.append(header)
            headers.append(header) # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
            header_indices[header] = current_col_index
            current_col_index += 1

    # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –¥–æ–¥–∞–ª–∏—Å—è –Ω–æ–≤—ñ
    if new_headers:
        print(f"–î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(new_headers)}")
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (–≤–µ—Å—å –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫)
        header_range = f"A1:{gspread.utils.rowcol_to_a1(1, len(headers))[:-1]}1" # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –¥–æ–≤–∂–∏–Ω—É headers
        worksheet.update(values=[headers], range_name=header_range)
        # –ü–µ—Ä–µ—á–∏—Ç—É—î–º–æ –¥–∞–Ω—ñ, —â–æ–± –º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
        sheet_data = worksheet.get_all_values()
        # –ü–µ—Ä–µ–∑–∞–ø–æ–≤–Ω—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏, –æ—Å–∫—ñ–ª—å–∫–∏ —Å—Ç–æ–≤–ø—Ü—ñ –º–æ–≥–ª–∏ –¥–æ–¥–∞—Ç–∏—Å—å
        header_indices = {}
        for i, h in enumerate(headers): # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ headers –∑ —Ç–∞–±–ª–∏—Ü—ñ
            if h in required_headers or h == "Url":
                 header_indices[h] = i

    print(f"–ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {len(results)} URL...")

    all_updates = []
    updated_rows = 0
    not_found_urls = []

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É —Ä—è–¥–∫–∞ –∑–∞ URL
    url_to_row_index = {row[url_index]: i + 2 for i, row in enumerate(sheet_data[1:]) if url_index < len(row) and row[url_index]}

    for result in results:
        original_url = result.get("url") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π URL –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        if not original_url: continue # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ URL –Ω–µ –±—É–ª–æ

        row_idx = url_to_row_index.get(original_url) # –®—É–∫–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å —Ä—è–¥–∫–∞

        if row_idx:
            row_updates = {} # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—è–¥–∫–∞ [col_index] = value

            # --- –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –±–∞–∑–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ ---
            # (Status Code, Final URL, Final Status, Robots, Meta, Canonical) - —Ü—è –ª–æ–≥—ñ–∫–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è
            has_redirects = len(result.get("redirect_chain", [])) > 0
            # Status Code / Final Status Code / Final Redirect URL
            if has_redirects:
                if "Status Code" in header_indices: row_updates[header_indices["Status Code"]] = "Redirect"
                if "Final Redirect URL" in header_indices and result.get("final_url") and result["final_url"] != original_url:
                     row_updates[header_indices["Final Redirect URL"]] = result["final_url"]
                else:
                     if "Final Redirect URL" in header_indices: row_updates[header_indices["Final Redirect URL"]] = "" # –û—á–∏—â–∞—î–º–æ, —è–∫—â–æ URL —Ç–∞–∫–∏–π —Å–∞–º–∏–π
                if "Final Status Code" in header_indices and result.get("final_status_code") is not None:
                     row_updates[header_indices["Final Status Code"]] = str(result["final_status_code"])
            elif "status_code" in result and result.get("status_code") is not None:
                 if "Status Code" in header_indices: row_updates[header_indices["Status Code"]] = str(result["status_code"])
                 # –Ø–∫—â–æ –Ω–µ –±—É–ª–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ñ–≤, –æ—á–∏—â—É—î–º–æ Final URL —Ç–∞ Final Status
                 if header_indices.get("Final Redirect URL"):
                     row_updates[header_indices["Final Redirect URL"]] = ""
                 if header_indices.get("Final Status Code"):
                     row_updates[header_indices["Final Status Code"]] = ""
            elif result.get("error"): # –Ø–∫—â–æ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É (–Ω–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç —ñ –Ω–µ —É—Å–ø—ñ—à–Ω–∏–π —Å—Ç–∞—Ç—É—Å)
                if "Status Code" in header_indices: row_updates[header_indices["Status Code"]] = "Error" # –ê–±–æ result["error"]?
                if header_indices.get("Final Redirect URL"): row_updates[header_indices["Final Redirect URL"]] = ""
                if header_indices.get("Final Status Code"): row_updates[header_indices["Final Status Code"]] = ""


            # Robots.txt
            if "Robots.txt" in header_indices:
                 robots_disallowed = []
                 if result.get("robots_star_allowed") is False: robots_disallowed.append("*")
                 if result.get("robots_googlebot_allowed") is False: robots_disallowed.append("Googlebot")
                 row_updates[header_indices["Robots.txt"]] = f"–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ ({', '.join(robots_disallowed)})" if robots_disallowed else ""

            # Meta Robots/X-Robots-Tag
            if "Meta Robots/X-Robots-Tag" in header_indices:
                 if dr := result.get("indexing_directives"):
                     tags = []
                     if dr.get("noindex"): tags.append("noindex")
                     if dr.get("nofollow"): tags.append("nofollow")
                     if tags and dr.get("source"):
                         row_updates[header_indices["Meta Robots/X-Robots-Tag"]] = f"{dr['source']}: {', '.join(tags)}"
                     else:
                          row_updates[header_indices["Meta Robots/X-Robots-Tag"]] = "" # –û—á–∏—â–∞—î–º–æ, —è–∫—â–æ –Ω–µ–º–∞—î —Ç–µ–≥—ñ–≤ –∞–±–æ –¥–∂–µ—Ä–µ–ª–∞
                 else:
                      row_updates[header_indices["Meta Robots/X-Robots-Tag"]] = "" # –û—á–∏—â–∞—î–º–æ, —è–∫—â–æ –Ω–µ–º–∞—î –¥–∏—Ä–µ–∫—Ç–∏–≤

            # Canonical
            if "Canonical" in header_indices:
                 if canon_url := result.get("canonical_url"):
                     decoded_canon = unquote(canon_url)
                     target_url_to_compare = result.get("final_url") if has_redirects else normalize_url(original_url)
                     decoded_target = unquote(target_url_to_compare) if target_url_to_compare else ""
                     # –ó–∞–ø–∏—Å—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è —ñ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
                     row_updates[header_indices["Canonical"]] = canon_url if canon_url and decoded_canon != decoded_target else ""
                 else:
                      row_updates[header_indices["Canonical"]] = "" # –û—á–∏—â–∞—î–º–æ, —è–∫—â–æ –Ω–µ–º–∞—î

            # --- –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—Å–∏–ª–∞–Ω—å (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏) ---
            if result.get("final_status_code") == 200: # –ó–∞–ø–∏—Å—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω—å —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±—É–ª–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (—Å—Ç–∞—Ç—É—Å 200)

                # –ü–∞—Ä–∞ 1 (–∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è)
                if "–£—Ä–ª-1 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å" in header_indices: row_updates[header_indices["–£—Ä–ª-1 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å"]] = result.get("url1_found", "–ù—ñ")
                if "–ê–Ω–∫–æ—Ä-1 —Å–ø—ñ–≤–ø–∞–¥–∞—î" in header_indices: row_updates[header_indices["–ê–Ω–∫–æ—Ä-1 —Å–ø—ñ–≤–ø–∞–¥–∞—î"]] = result.get("anchor1_match", "–ù—ñ")
                if "–£—Ä–ª-1 rel" in header_indices:
                    rel_val_1 = result.get("url1_rel")
                    row_updates[header_indices["–£—Ä–ª-1 rel"]] = rel_val_1 if rel_val_1 is not None else ""

                # –ü–∞—Ä–∞ 2 (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ —ñ—Å–Ω—É—é—Ç—å)
                if has_input_pair2 and "–£—Ä–ª-2 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å" in header_indices:
                    if result.get("–ê–Ω–∫–æ—Ä-2") and result.get("–£—Ä–ª-2"): # –ß–∏ –±—É–ª–∏ –¥–∞–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–∏ 2?
                        row_updates[header_indices["–£—Ä–ª-2 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å"]] = result.get("url2_found", "–ù—ñ")
                        if "–ê–Ω–∫–æ—Ä-2 —Å–ø—ñ–≤–ø–∞–¥–∞—î" in header_indices: row_updates[header_indices["–ê–Ω–∫–æ—Ä-2 —Å–ø—ñ–≤–ø–∞–¥–∞—î"]] = result.get("anchor2_match", "–ù—ñ")
                        if "–£—Ä–ª-2 rel" in header_indices:
                             rel_val_2 = result.get("url2_rel")
                             row_updates[header_indices["–£—Ä–ª-2 rel"]] = rel_val_2 if rel_val_2 is not None else ""
                    else: # –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–∞—Ä–∏ 2 –Ω–µ –±—É–ª–æ, –æ—á–∏—â–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (—è–∫—â–æ —Å—Ç–æ–≤–ø—Ü—ñ —î)
                        row_updates[header_indices["–£—Ä–ª-2 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å"]] = ""
                        if "–ê–Ω–∫–æ—Ä-2 —Å–ø—ñ–≤–ø–∞–¥–∞—î" in header_indices: row_updates[header_indices["–ê–Ω–∫–æ—Ä-2 —Å–ø—ñ–≤–ø–∞–¥–∞—î"]] = ""
                        if "–£—Ä–ª-2 rel" in header_indices: row_updates[header_indices["–£—Ä–ª-2 rel"]] = ""

                # –ü–∞—Ä–∞ 3 (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ —ñ—Å–Ω—É—é—Ç—å)
                if has_input_pair3 and "–£—Ä–ª-3 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å" in header_indices:
                    if result.get("–ê–Ω–∫–æ—Ä-3") and result.get("–£—Ä–ª-3"): # –ß–∏ –±—É–ª–∏ –¥–∞–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–∏ 3?
                        row_updates[header_indices["–£—Ä–ª-3 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å"]] = result.get("url3_found", "–ù—ñ")
                        if "–ê–Ω–∫–æ—Ä-3 —Å–ø—ñ–≤–ø–∞–¥–∞—î" in header_indices: row_updates[header_indices["–ê–Ω–∫–æ—Ä-3 —Å–ø—ñ–≤–ø–∞–¥–∞—î"]] = result.get("anchor3_match", "–ù—ñ")
                        if "–£—Ä–ª-3 rel" in header_indices:
                            rel_val_3 = result.get("url3_rel")
                            row_updates[header_indices["–£—Ä–ª-3 rel"]] = rel_val_3 if rel_val_3 is not None else ""
                    else: # –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–∞—Ä–∏ 3 –Ω–µ –±—É–ª–æ, –æ—á–∏—â–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (—è–∫—â–æ —Å—Ç–æ–≤–ø—Ü—ñ —î)
                        row_updates[header_indices["–£—Ä–ª-3 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å"]] = ""
                        if "–ê–Ω–∫–æ—Ä-3 —Å–ø—ñ–≤–ø–∞–¥–∞—î" in header_indices: row_updates[header_indices["–ê–Ω–∫–æ—Ä-3 —Å–ø—ñ–≤–ø–∞–¥–∞—î"]] = ""
                        if "–£—Ä–ª-3 rel" in header_indices: row_updates[header_indices["–£—Ä–ª-3 rel"]] = ""

            else: # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –ø–æ–ª—è –ø–æ—Å–∏–ª–∞–Ω—å, —è–∫—â–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å (—Å—Ç–∞—Ç—É—Å –Ω–µ 200)
                 # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ –ø–µ—Ä–µ–¥ –æ—á–∏—â–µ–Ω–Ω—è–º
                 if "–£—Ä–ª-1 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å" in header_indices: row_updates[header_indices["–£—Ä–ª-1 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å"]] = ""
                 if "–ê–Ω–∫–æ—Ä-1 —Å–ø—ñ–≤–ø–∞–¥–∞—î" in header_indices: row_updates[header_indices["–ê–Ω–∫–æ—Ä-1 —Å–ø—ñ–≤–ø–∞–¥–∞—î"]] = ""
                 if "–£—Ä–ª-1 rel" in header_indices: row_updates[header_indices["–£—Ä–ª-1 rel"]] = ""
                 # –û—á–∏—â–µ–Ω–Ω—è –¥–ª—è –ø–∞—Ä–∏ 2, —è–∫—â–æ —Å—Ç–æ–≤–ø—Ü—ñ —î
                 if has_input_pair2:
                     if "–£—Ä–ª-2 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å" in header_indices: row_updates[header_indices["–£—Ä–ª-2 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å"]] = ""
                     if "–ê–Ω–∫–æ—Ä-2 —Å–ø—ñ–≤–ø–∞–¥–∞—î" in header_indices: row_updates[header_indices["–ê–Ω–∫–æ—Ä-2 —Å–ø—ñ–≤–ø–∞–¥–∞—î"]] = ""
                     if "–£—Ä–ª-2 rel" in header_indices: row_updates[header_indices["–£—Ä–ª-2 rel"]] = ""
                 # –û—á–∏—â–µ–Ω–Ω—è –¥–ª—è –ø–∞—Ä–∏ 3, —è–∫—â–æ —Å—Ç–æ–≤–ø—Ü—ñ —î
                 if has_input_pair3:
                     if "–£—Ä–ª-3 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å" in header_indices: row_updates[header_indices["–£—Ä–ª-3 –Ω–∞—è–≤–Ω—ñ—Å—Ç—å"]] = ""
                     if "–ê–Ω–∫–æ—Ä-3 —Å–ø—ñ–≤–ø–∞–¥–∞—î" in header_indices: row_updates[header_indices["–ê–Ω–∫–æ—Ä-3 —Å–ø—ñ–≤–ø–∞–¥–∞—î"]] = ""
                     if "–£—Ä–ª-3 rel" in header_indices: row_updates[header_indices["–£—Ä–ª-3 rel"]] = ""


            # –î–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ –º–∞—Å–∏–≤—É, —è–∫—â–æ —î –∑–º—ñ–Ω–∏
            if row_updates:
                current_row_data = sheet_data[row_idx - 1] # row_idx –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 2, —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏–≤—É –∑ 0
                update_needed_for_row = False
                for col_idx, value in row_updates.items():
                    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —ñ–Ω–¥–µ–∫—Å —ñ—Å–Ω—É—î –≤ —Å–ª–æ–≤–Ω–∏–∫—É (—Å—Ç–æ–≤–ø–µ—Ü—å –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π/–∑–Ω–∞–π–¥–µ–Ω–∏–π)
                    if col_idx is not None: # header_indices –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –∞–±–æ None —è–∫—â–æ –Ω–µ–º–∞—î
                        # –§–æ—Ä–º—É—î–º–æ Cell ID (–Ω–∞–ø—Ä. "A2", "K5")
                        col_letter = gspread.utils.rowcol_to_a1(1, col_idx + 1)[:-1] # +1 –±–æ —ñ–Ω–¥–µ–∫—Å–∏ –∑ 0
                        cell_id = f"{col_letter}{row_idx}"

                        # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —ñ—Å–Ω—É—é—á–∏–º (—è–∫—â–æ –∫–æ–ª–æ–Ω–∫–∞ —ñ—Å–Ω—É—î –≤ —Ä—è–¥–∫—É –¥–∞–Ω–∏—Ö)
                        current_value = str(current_row_data[col_idx]) if col_idx < len(current_row_data) else ""
                        new_value = str(value) # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —è–∫ —Ä—è–¥–∫–∏

                        if new_value != current_value:
                             all_updates.append((cell_id, value))
                             update_needed_for_row = True # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –¥–ª—è —Ü—å–æ–≥–æ —Ä—è–¥–∫–∞ –ø–æ—Ç—Ä—ñ–±–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

                if update_needed_for_row:
                     updated_rows += 1
        else:
            not_found_urls.append(original_url)

    if all_updates:
        print(f"–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–∞–∫–µ—Ç–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {len(all_updates)} –∫–æ–º—ñ—Ä–æ–∫...")
        batch_updates_payload = [{'range': cell_id, 'values': [[value]]} for cell_id, value in all_updates]

        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ –æ–Ω–æ–≤–ª–µ–Ω—å –∑–∞–±–∞–≥–∞—Ç–æ (API –º–æ–∂–µ –º–∞—Ç–∏ –ª—ñ–º—ñ—Ç–∏)
        BATCH_SIZE = 500
        for i in range(0, len(batch_updates_payload), BATCH_SIZE):
            batch = batch_updates_payload[i:i + BATCH_SIZE]
            print(f"  –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–∞–∫–µ—Ç {i//BATCH_SIZE + 1} ({len(batch)} –æ–Ω–æ–≤–ª–µ–Ω—å)...")
            try:
                worksheet.batch_update(batch)
            except gspread.exceptions.APIError as api_e:
                print(f"   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ API –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–∞–∫–µ—Ç—É: {api_e}")
                # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –∞–±–æ –ø—Ä–æ–ø—É—Å–∫—É
            except Exception as batch_e:
                print(f"   ‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–∞–∫–µ—Ç—É: {batch_e}")


        print(f"–ü–∞–∫–µ—Ç–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print("–ù–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –∑–∞–ø–∏—Å—É –≤ —Ç–∞–±–ª–∏—Ü—é.")


    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:")
    print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Ä—è–¥–∫—ñ–≤ (–∑ —Ä–µ–∞–ª—å–Ω–∏–º –∑–º—ñ–Ω–∞–º–∏ –∑–Ω–∞—á–µ–Ω—å): {updated_rows}")
    if not_found_urls:
        print(f"‚ö†Ô∏è URL, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ ({len(not_found_urls)}): {', '.join(not_found_urls[:5])}...")
        if len(not_found_urls) > 5:
            print(f"   ... —Ç–∞ —â–µ {len(not_found_urls) - 5}")

#
# 4.5 –§–£–ù–ö–¶–Ü–á –û–ë–†–û–ë–ö–ò –ü–û–ú–ò–õ–û–ö (Google Sheet)
#

def handle_header_error(error, result):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤."""
    expected = ast.literal_eval(error.split('–û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: ')[1].split(', –û—Ç—Ä–∏–º–∞–Ω–æ:')[0])
    actual = ast.literal_eval(error.split('–û—Ç—Ä–∏–º–∞–Ω–æ: ')[1]) if ', –û—Ç—Ä–∏–º–∞–Ω–æ:' in error else result.get("actual_headers", [])
    print("‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤",
          f"\n  –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ (–ø–æ –ø–æ—Ä—è–¥–∫—É): {', '.join(expected)}",
          f"\n  –ó–Ω–∞–π–¥–µ–Ω–æ: {', '.join(actual)}",
          "\n‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —ñ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É")
    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–∂–ª–∏–≤—ñ –ø–æ–º–∏–ª–∫–∏ –ø–æ—Ä—è–¥–∫—É
    if "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫" in error:
         print(f"‚Ä¢ –ü–æ–º–∏–ª–∫–∞ —Ç–∞–∫–æ–∂ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ –ø–æ—Ä—è–¥–∫–æ–º —Å—Ç–æ–≤–ø—Ü—ñ–≤ –ø–µ—Ä–µ–¥ 'Url'. –î–µ—Ç–∞–ª—ñ: {error.split('. ', 1)[1]}")
    elif "–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏" in error:
         print(f"‚Ä¢ {error}")

def handle_missing_data_error(error):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –¥–∞–Ω–∏—Ö."""
    missing_data = ast.literal_eval(error.split("–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –≤ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—è—Ö: ")[1])
    print("‚Ä¢ –í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –≤ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—è—Ö:")
    [print(f"  - –£ —Å—Ç–æ–≤–ø—Ü—ñ '{col}' –ø–æ—Ä–æ–∂–Ω—ñ –∫–æ–º—ñ—Ä–∫–∏ –≤ —Ä—è–¥–∫–∞—Ö: {', '.join(map(str, rows))}")
     for col, rows in missing_data.items()]
    print("‚Ä¢ –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –≤ –∑–∞–∑–Ω–∞—á–µ–Ω–∏—Ö —Ä—è–¥–∫–∞—Ö")

#
# 5. –§–£–ù–ö–¶–Ü–á –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í
#

def display_sheet_validation_results(result):
    """–í–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ, –∑—Ä–æ–∑—É–º—ñ–ª–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    print(f"\n{'='*50}\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–ï–†–ï–í–Ü–†–ö–ò –¢–ê–ë–õ–ò–¶–Ü:\n{'='*50}")

    if result["success"]:
        print("‚úÖ –£–°–ü–Ü–•! –¢–∞–±–ª–∏—Ü—è –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É.",
              "\n‚Ä¢ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
              "\n‚Ä¢ –í—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
        return

    # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫
    print("‚ùå –ü–û–ú–ò–õ–ö–ê! –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ç–∞–±–ª–∏—Ü–µ—é:")
    error = result["error"]

    for err_type, handler in {
        "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL": lambda: print(f"‚Ä¢ {error}\n‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ —Å–∫–æ–ø—ñ—é–≤–∞–ª–∏ –ø–æ–≤–Ω–∏–π URL Google —Ç–∞–±–ª–∏—Ü—ñ"),
        "–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è": lambda: print(f"‚Ä¢ {error}\n‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ"),
        "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤": lambda: handle_header_error(error, result),
        "–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –≤ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—è—Ö": lambda: handle_missing_data_error(error)
    }.items():
        if err_type in error:
            handler()
            break
    else:
        print(f"‚Ä¢ {error}")

    print("="*50) 